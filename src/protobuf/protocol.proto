syntax = 'proto3';

package Google.Protobuf.Protocol;

enum PacketId {
    PING = 0;
    REQUEST = 1;
    RESPONSE = 2;
    NOTIFICATION = 3;
}

enum MsgId {
    C_ENTER = 0;
    S_ENTER = 1;
    S_SPAWN = 2;
    S_DESPAWN = 5;
    C_MOVE = 6;
    S_MOVE = 7;
    C_ANIMATION = 8;
    S_ANIMATION = 9;
    C_CHAT = 12;
    S_CHAT = 13;

    C_PLAYER_RESPONSE = 15;
    
    S_SCREEN_TEXT = 18;
    S_SCREEN_DONE = 19;
    S_BATTLE_LOG = 20;
    S_SET_PLAYER_HP = 21;
    S_SET_PLAYER_MP = 22;
    S_SET_MONSTER_HP = 23;
    S_PLAYER_ACTION = 24;
    S_MONSTER_ACTION = 25;
    C_SIGN_UP = 26;
    S_SIGN_UP = 27;
    C_LOG_IN = 28;
    S_LOG_IN = 29; 
    C_PLAYER_ATTACK = 40;
    S_PLAYER_ATTACK = 41;
    C_MONSTER_ATTACKED = 42;
    S_MONSTER_ATTACKED = 43;
    C_MONSTER_ATTACK =  44;
    S_PLAYER_ATTACKED = 45;

    C_DUNGEON_MATCH = 50;
    S_DUNGEON_MATCH = 51;
    S_ENTER_DUNGEON = 54;
    S_LEAVE_DUNGEON = 55;
    C_DAY_ROUND_READY = 56;
    S_DAY_ROUND_READY = 57;
    S_NIGHT_ROUND_START = 58;
    S_NIGHT_ROUND_END = 59;
    C_MONSTER_MOVE = 60;
    S_MONSTER_MOVE = 61;

    S_SOME_NOTIFICATION = 300;
}

message C_SignUp {
  string accountId = 1;
  string accountPwd = 2;
}

message S_SignUp {
  string accountId = 1;
}

message C_LogIn {
  string accountId = 1;
  string accountPwd = 2;
}

message S_LogIn {
  string accountId = 1;
  string token = 2;
}

// 응답 패킷 - S_Enter, S_Spawn
message C_Enter{
  string nickname = 1;
  int32 charClass = 2;
}

// MINE
message S_Enter {
  PlayerInfo player = 1;
}

// OTHERS
message S_Spawn {
  repeated PlayerInfo players = 1;
}

// 접속상태를 서버에서 판단해서 끊기도 다른 플레이어들 정보 전달
// 응답 패킷 - S_Leave, S_Despawn
message S_Despawn {
  repeated string playerIds = 1; // PlayerInfo 전부 말고 아이디만 받는다.
}


// 응답 패킷 - S_Move
message C_Move {
  TransformInfo transform = 1;
}

// ALL
message S_Move {
  string playerId = 1;
  TransformInfo transform = 2;
}

// 호스트
message C_MonsterMove {
  int32 monsterIdx = 1;
  TransformInfo transform = 2;
}

// 게스트
message S_MonsterMove {
  int32 monsterIdx = 1;
  TransformInfo transform = 2;
}

// 응답 패킷 - S_Animation
message C_Animation {
  int32 animCode = 1;
}

// ALL
message S_Animation {
  string playerId = 1;
  int32 animCode = 2;
}


// 응답 패킷 - C_Chat
message S_Chat{
  string playerId = 1;
  string chatMsg = 2;
}


// ALL
message C_Chat{
  string playerId = 1;
  string senderName = 2;
  string chatMsg = 3;
}

// 응답 패킷 - S_EnterDungeon
message C_EnterDungeon{
  int32 dungeonCode = 1;
}

message C_PlayerResponse{
  int32 responseCode = 1;
}

message C_DungeonMatch {
  uint32 dungeonCode = 1;
}

message S_DungeonMatch {
  uint32 dungeonCode = 1;
  // ScreenText screenText = 2;
}

// Me
message S_EnterDungeon{
  DungeonInfo dungeonInfo = 1;
	repeated PlayerInfo playerInfo = 2;
  repeated PlayerStatus players = 3;
  // repeated StatInfo statInfo = 3; // 전투 시에 사용하는
  // optional ScreenText screenText = 3;
  // optional BattleLog battleLog = 4;
}

// Me
message S_LeaveDungeon { }

// Me
message S_ScreenText{
  ScreenText screenText = 1;
}

// Me
message S_ScreenDone { }

// Me
message S_BattleLog {
  BattleLog battleLog = 1;
}

// Me
message S_SetPlayerHp {
  float hp = 1;
}

// Me
message S_SetPlayerMp {
  float mp = 1;
}

// Me
message S_SetMonsterHp {
  int32 monsterIdx = 1;
  float hp = 2;
}

// Me
message S_PlayerAction {
  int32 targetMonsterIdx = 1;
  ActionSet actionSet = 2;
}

// Me
message S_MonsterAction {
  int32 actionMonsterIdx = 1;
  ActionSet actionSet = 2;
}

// My 플레이어의 공격만 서버에 전송
message C_PlayerAttack{
	int32 attackType = 2; // 공격 종류
  int32 monsterIdx = 3; // 공격 받는 몬스터 Idx
}

// All
message S_PlayerAttack{
  string playerId = 1; // 공격하는 유저 accountId
	int32 attackType = 2; // 공격 종류
  int32 monsterIdx = 3; // 공격 받는 몬스터 Idx
}

// My 플레이어의 공격 판정에 당한 경우만 서버에 전송
message C_MonsterAttacked{
	int32 attackType = 2; // 공격 종류
  int32 monsterIdx = 3; // 공격 받는 몬스터 Idx
}

// All
message S_MonsterAttacked{
  int32 monsterIdx = 3; // 공격 받은 몬스터 Idx
  float monsterHp = 4; // 몬스터 남은 체력
}

// 몬스터가 플레이어를 공격할 경우(호스트만 전송)
message C_MonsterAttack{
  int32 monsterIdx = 1; // 공격 하는 몬스터 Idx
  string playerId = 2; // 공격받는 유저 accountId
}

// All
message S_PlayerAttacked{
  int32 monsterIdx = 1; // 공격 하는 몬스터 Idx
  string playerId = 2; // 공격받는 유저 accountId
  float playerHp = 3; // 공격받은 유저 남은 체력
}

// 개인 준비 완료 패킷
message C_DayRoundReady {
  // 내용 없음
}

// 준비 완료 서버 응답
message S_DayRoundReady {
  bool isReady = 1; // 서버 기준 준비 상태 알림, 1이 준비 완료
}

// 마지막 유저 준비 완료 시 전체 통지
message S_NightRoundStart {
  // uint32 stageId = 1;
}

// 라운드의 마지막 몬스터가 처치됐을 시 전체 통지
message S_NightRoundEnd {
  DungeonInfo dungeonInfo = 1; // 다음 라운드 몬스터 목록
  // 밤 라운드 정산에 필요한 정보 전송
  repeated RoundResult roundResults = 2;
}

// ---------------------------------
// 정보 구조체

message PlayerInfo {
  string playerId = 1;   // 입장할때 서버 내부에서 생성한 관리코드
  string nickname = 2;  // C_EnterGame 에서 지정한 이름
  int32 charClass = 3;      // C_EnterGame 에서 지정한 직업 정보, 이 정보를 통해 캐릭터가 결정
  TransformInfo transform = 4;
}

// C_Enter 를 통해 입장했을때는 서버에서 랜덤으로 위치값 생성 / 기본값은 하단 밸류 참조
// C_Move 를 통해 전달된 데이터는 그대로 다른 사용자에게 릴레이
message TransformInfo {
  float posX = 1; // 기본값 : -9 ~ 9
  float posY = 2; // 기본값 : 1
  float posZ = 3; // 기본값 : -8 ~ 8
  float rot = 4; // 기본값 : 0~360
}

message StatInfo {
  int32 level = 1;
  float hp = 2;
  float maxHp = 3;
  float mp = 4;
  float maxMp = 5;
  float atk = 6;
  float def = 7;
  float magic = 8;
  float speed = 9; 
}

message ScreenText{
  string msg = 1;
  bool typingAnimation = 2;
  optional ScreenTextAlignment alignment = 3;
  optional Color textColor = 4;
  optional Color screenColor = 5;
}

message ScreenTextAlignment {
  int32 x = 1;
  int32 y = 2;
}

message Color {
  int32 r = 1;
  int32 g = 2;
  int32 b = 3;
}

message DungeonInfo {
  int32 dungeonCode = 1;
  repeated MonsterStatus monsters = 2;
}

message MonsterStatus {
  int32 monsterIdx = 1;
  int32 monsterModel = 2;
  string monsterName = 3;
  float monsterHp = 4;
}

message ActionSet {
  int32 animCode = 1;
  int32 effectCode = 2;
}

message PlayerStatus {
  // int32 playerClass = 1;
  int32 playerLevel = 2;
  string playerName = 3; // nickname
  float playerFullHp = 4;
  float playerFullMp = 5;
  float playerCurHp = 6;
  float playerCurMp = 7;
}

message BattleLog {
  string msg = 1;
  bool typingAnimation = 2;
  repeated BtnInfo btns = 3;
}

message BtnInfo {
  string msg = 1;
  bool enable = 2;
}

message RoundResult {
  string nickname = 1;
  uint32 score = 2;
  uint32 killCound = 3;
  // 밤 라운드 정산 정보 있으면 여기에 추가
}

// 패킷
message PingPacket {
  uint64 timestamp = 1;
}

message RequestPacket {
  string clientVersion = 1;
  uint32 sequence = 2;
  string token = 3;
  uint32 payloadType = 4;
  oneof payload {
    C_Enter cEnter = 5;
    C_Move cMove = 6;
    C_Animation cAnimation = 7;
    C_Chat cChat = 8;
    C_DungeonMatch cDungeonMatch = 9;
    C_EnterDungeon cEnterDungeon = 10;
    C_PlayerResponse cPlayerResponse = 11;
    C_SignUp cSignUp = 12;
    C_LogIn cLogIn = 13;
    C_MonsterMove cMonsterMove = 14;
    C_PlayerAttack cPlayerAttack = 25;
    C_MonsterAttacked cMonsterAttacked = 26;
    C_MonsterAttack cMonsterAttack = 27;
  }
}

message ResponsePacket {
  uint32 code = 1;
  string message = 2;
  uint64 timestamp = 3;
  uint32 payloadType = 4;
  oneof payload {
    S_Enter sEnter = 5;
    S_Spawn sSpawn = 6;
    S_Despawn sDespawn = 7;
    S_Move sMove = 8;

    S_Animation sAnimation = 9;
    S_Chat sChat = 10;

    S_DungeonMatch sDungeonMatch = 23;
    S_EnterDungeon sEnterDungeon = 24;
    S_LeaveDungeon sLeaveDungeon = 12;
    
    S_ScreenText sScreenText = 13;
    S_ScreenDone sScreenDone = 14;

    S_BattleLog sBattleLog = 15;
    S_SetPlayerHp sSetPlayerHp = 16;
    S_SetPlayerMp sSetPlayerMp = 17;
    S_SetMonsterHp sSetMonsterHp = 18;
    S_PlayerAction sPlayerAction = 19;
    S_MonsterAction sMonsterAction = 20;

    S_SignUp sSignUp = 21;
    S_LogIn sLogIn = 22;
    S_PlayerAttack sPlayerAttack = 25;
    S_MonsterAttacked sMonsterAttacked = 26;

  }
}

message NotificationPacket {
  uint64 timestamp = 1;
  uint32 payloadType = 2;
  oneof payload {
    S_Move sMove = 3;
    S_Despawn sDespawn = 4;
    S_Spawn sSpawn = 5;

    S_NightRoundStart sNightRoundStart = 6;
    S_NightRoundEnd sNightRoundEnd = 7;
    S_MonsterMove sMonsterMove = 8;

    S_PlayerAttack sPlayerAttack = 25;
    S_MonsterAttacked sMonsterAttacked = 26;
    S_PlayerAttacked sPlayerAttacked = 27;
    // S_EnterDungeon sEnterDungeon = 11;
    S_Chat sChat = 9;
  }
}